# This "input" configures a global authorization rule to enable public access to
# all models in this schema. Learn more about authorization rules here: https://docs.amplify.aws/cli/graphql/authorization-rules
input AMPLIFY {
  globalAuthRule: AuthRule = { allow: public }
} # FOR TESTING ONLY!
type Adventure
  @model
  @auth(
    rules: [{ allow: private, operations: [create, read, update, delete] }]
  ) {
  id: ID!
  creatorEmail: String!
  creatorId: String!
  name: String!
  description: String
  adventurePicPath: String
  adventurePicS3Url: String
  players: [String]
  scenes: [Scene] @hasMany(indexName: "byAdventure", fields: ["id"])
}

type UserData
  @model
  @auth(
    rules: [{ allow: private, operations: [create, read, update, delete] }]
  ) {
  id: ID!
  email: String
  sub: String
  firstName: String
  lastName: String
  nickName: String
}

type Map
  @model
  @auth(
    rules: [{ allow: private, operations: [create, read, update, delete] }]
  ) {
  id: ID!
  creatorEmail: String!
  creatorId: String!
  name: String!
  description: String
  shared: Boolean
  category: String!
  gridded: Boolean
  drawGrid: Boolean
  gridHtmlColor: String
  gridOffsetX: Float
  gridOffsetY: Float
  gridColumns: Float
  gridRows: Float
  gridCellWidth: Float
  gridCellHeight: Float
  mapThumbPicPath: String
  mapThumbPicS3Url: String
  mapPicPath: String
  mapPicS3Url: String
  tags: [String]
  scenes: [Scene] @hasMany(indexName: "byMap", fields: ["id"])
}

type Token
  @model
  @auth(
    rules: [{ allow: private, operations: [create, read, update, delete] }]
  ) {
  id: ID!
  creatorEmail: String!
  creatorId: String!
  name: String!
  shared: Boolean
  systemProvided: Boolean
  description: String
  category: String!
  tokenPicPath: String
  tokenPicS3Url: String
  tags: [String]
}

type Entity
  @model
  @auth(
    rules: [{ allow: private, operations: [create, read, update, delete] }]
  ) {
  id: ID!
  creatorEmail: String!
  creatorId: String!
  name: String!
  description: String
  category: String!
  tokenId: String
  tokenPicPath: String
  tokenPicS3Url: String
  tags: [String]
}

type Scene
  @model
  @auth(
    rules: [{ allow: private, operations: [create, read, update, delete] }]
  ) {
  id: ID!
  adventureId: ID! @index(name: "byAdventure", sortKeyFields: ["name"])
  mapId: ID! @index(name: "byMap", sortKeyFields: ["name"])
  creatorEmail: String!
  creatorId: String!
  name: String!
  description: String
  adventure: Adventure @belongsTo(fields: ["adventureId"])
  map: Map @belongsTo(fields: ["mapId"])
}
